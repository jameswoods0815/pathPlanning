import math
import matplotlib.pyplot as plt
import numpy as np


class GreedyMethod():

    def __init__(self, map1):
        self.map = np.load(map1)
        dimx = len(self.map[0][0])
        dimy = len(self.map[0])
        dimz = len(self.map)
        self.mapImage=np.load('mapImage.npy')
        print(dimx, dimy, dimz)

    class Node:
        def __init__(self, x, y, z, parentID, parent, cost):
            self.x = x
            self.y = y
            self.z = z
            self.parentID = parentID
            self.parent = parent
            self.cost = cost

    def cal_goal_cost(self, node, goal):
        goalx=goal.x*2
        goaly=goal.y*2
        nodex,nodey=self.get_xyz_from_index(node.x,node.y,node.z)

        dx = goalx-nodex
        dy = goaly-nodey
        angle = math.atan2(dy, dx)
        # get angle as 0-2pi
        if angle < 0:
            angle = angle + 3.1415 * 2
        degree = angle * 180 / 3.14
        desireZ = int(degree / 5)
        dis = math.hypot(dx, dy)
        cost = dis + 10*degree
        return cost

    ## use all real number of the data not the grid z is real degree;
    def get_grid_postion_from_xyz(self, x, y, z):

        if z != 0 and z != 90 and z != 180 and z != 270 and z != 360:
            originY_left = abs(300 * math.sin(z / 180 * 3.14)) * abs(math.sin(z / 180 * 3.14))
            originX_left = -abs(300 * math.sin(z / 180 * 3.14)) * abs(math.cos(z / 180 * 3.14))
            dx = x - originX_left
            dy = y - originY_left

            k1 = abs(math.tan(z / 180 * 3.14))
            k2 = -1 / k1

            disY = abs(dx * k1 - dy) / math.hypot(1, k1)
            disX = abs(dx * k2 - dy) / math.hypot(1, k2)

            indexX = int(disX / 2)
            indexY = int(disY / 2)
        else:
            indexX = int(x / 2)
            indexY = int(y / 2)

        return indexX, indexY

    ### Z is the index for map
    def get_xyz_from_index(self, indexX, indexY, Z):

        if Z * 5 != 0 and Z * 5 != 90 and Z * 5 != 180 and Z * 5 != 270 and Z * 5 != 360:
            radius = Z * 5 / 180 * 3.14
            originY_left = abs(300 * math.sin(radius)) * abs(math.sin(radius))
            originX_left = -abs(300 * math.sin(radius) * abs(math.cos(radius)))
            angle = math.atan2(indexY, indexX)
            detAngle = abs((Z * 5-int(Z*5/90)*90) / 180 * 3.14 - angle)

            dis = math.hypot(indexX * 2, indexY * 2)
            realX = originX_left + dis * math.cos(detAngle)
            realY = originY_left + dis * math.sin(detAngle)
            return realX, realY
        else:
            realX = 2 * indexX
            realY = 2 * indexY
            return realX, realY

    def checkCollision_by_xyz(self, x, y, z):
        if x < 0 or x >= 800 or y < 0 or y >= 300:
            return False
        indexX = int(x / 2)
        indexY = int(y / 2)
        indexZ = int(z / 5)
        print(self.map[indexZ][indexY][indexX],indexX,indexY,indexZ)
        if self.map[indexZ][indexY][indexX]:
            return True
        else:
            return False

    def checkCollision_by_index(self, indexX, indexY, Z):
        position = self.get_xyz_from_index(indexX, indexY, Z)
        return self.checkCollision_by_xyz(position[0], position[1], Z * 5)

    # hash a node to an ID
    def cal_ID(self,node):
        return node.z*1000000+node.y*1000+node.x

    # from Hash to real index
    def get_Index_from_ID(self,ID):
        z=(int(ID/1000000))
        y= int((ID-z*1000000)/1000)
        x=int(ID-z*1000000-y*1000)
        return x,y,z

    def motion(self, i, current, ID):
        if i == 0:
            ## front
            node = self.Node(current.x + 1, current.y, current.z, ID, current, current.cost + 1)
            return node
        if i == 1:
            ## back
            node = self.Node(current.x - 1, current.y, current.z, ID, current, current.cost + 1)
            return node
        if i == 2:
            ## rotate angle +1
            # first get the real position
            position = self.get_xyz_from_index(current.x, current.y, current.z)
            if current.z == 71:
                tempz = 0
            else:
                tempz = current.z + 1

            index = self.get_grid_postion_from_xyz(position[0], position[1], tempz * 5)
            node = self.Node(index[0], index[1], tempz, ID, current, current.cost + 1)
            return node
        if i == 3:
            ## rotate angle -1
            position = self.get_xyz_from_index(current.x, current.y, current.z)
            if current.z == 0:
                tempz = 71
            else:
                tempz = current.z - 1
            index = self.get_grid_postion_from_xyz(position[0], position[1], tempz * 5)
            node = self.Node(index[0], index[1], tempz, ID, current, current.cost + 1)
            return node
        print('error index Not the motion')
        return


    def cal_final_path(self, goal,close_set):
        roadX=[]
        roadY=[]
        roadZ=[]
        roadX.append(goal.x)
        roadY.append(goal.y)
        roadZ.append(goal.z)

        n=close_set[goal.parentID]
        while n is not None :
            x,y,z= self.get_Index_from_ID(n.parentID)
            realx,realy=self.get_xyz_from_index(x,y,z)
            tmpx=int(realx)
            tmpy=int(realy)
            roadX.append(tmpx)
            roadY.append(tmpy)
            roadZ.append(z)
            n=n.parent

        return roadX, roadY, roadZ


    def planning(self, sx,sy,gx,gy):
        start=self.Node(int(sy/2),int(sy/2),0,-1,None,0.0)
        goal=self.Node(int(gx/2),int(gy/2),0,-1,None,0.0)

        open_set=dict()
        close_set=dict()
        open_set[self.cal_ID(start)]=start

        for i in range(1000000):
            print ('step', i)
            if len(open_set) ==0 :
                print("open set is empty, return")
                break
            ID = min(open_set, key=lambda o: self.cal_goal_cost(open_set[o], goal))

            current= open_set[ID]

            del open_set[ID]
            close_set[ID]=current

            position = self.get_xyz_from_index(current.x, current.y, current.z)
            print(position)
            if (int(position[0]/2))==goal.x and (int(position[1]/2))==goal.y:
                print("found the goal Now")
                goal.parentID = current.parentID
                goal.cost = current.cost
                break

            for i in range (4):
                node=self.motion(i,current,ID)
                node_ID=self.cal_ID(node)

                # if the node is not safe, do nothing
                if self.checkCollision_by_index(node.x,node.y,node.z):
                    continue
                if node_ID in close_set:
                    continue
                if node_ID not in open_set:
                    open_set[node_ID]=node
                else :
                    if open_set[node_ID].cost>node.cost :
                        open_set[node_ID]=node
        close_set[goal.parentID]=current
        roadX,roadY,roadZ =self.cal_final_path(goal,close_set)
        return roadX,roadY,roadZ

    def showMap(self):
        ox = []
        oy = []
        # np.save('mapImage',self.map)
        for y in range(150):
            for x in range(400):
                if self.mapImage[y][x]:
                    ox.append(x * 2)
                    oy.append(y * 2)
        plt.grid(True)
        plt.axis("equal")
        plt.plot(ox, oy, 'ro')



def main():
    x = GreedyMethod('360map.npy')
    #rx,ry,rz=x.planning(50,50,750,50)
    #print(rx)
    #print(ry)
    #print(rz)
    x.showMap()
    rx=[375, 752, 754, 756, 756, 757, 758, 756, 754, 752, 754, 754, 752, 750, 748, 746, 745, 743, 741, 739, 737, 735, 733, 731, 729, 727, 728, 729, 731, 732, 734, 736, 737, 738, 740, 742, 744, 746, 748, 750, 750, 752, 754, 756, 758, 760, 762, 756, 758, 760, 762, 764, 766, 768, 757, 758, 760, 761, 762, 763, 761, 763, 762, 763, 761, 763, 762, 763, 762, 763, 762, 763, 761, 763, 762, 763, 761, 763, 762, 763, 761, 762, 763, 761, 763, 763, 765, 765, 766, 767, 765, 763, 761, 759, 757, 755, 753, 751, 749, 747, 745, 743, 742, 740, 738, 736, 734, 732, 730, 728, 726, 720, 718, 716, 714, 712, 710, 708, 706, 704, 702, 700, 698, 696, 695, 693, 691, 689, 687, 685, 683, 681, 679, 677, 675, 673, 671, 669, 667, 666, 664, 662, 660, 658, 656, 654, 652, 650, 648, 646, 644, 642, 640, 639, 637, 635, 602, 600, 598, 596, 594, 592, 590, 588, 587, 585, 583, 581, 579, 577, 575, 573, 572, 573, 575, 573, 573, 571, 570, 568, 566, 565, 563, 562, 560, 558, 557, 558, 560, 561, 563, 564, 566, 567, 569, 570, 572, 574, 575, 577, 577, 575, 573, 572, 570, 569, 567, 565, 564, 562, 560, 559, 557, 555, 557, 558, 560, 562, 563, 565, 566, 568, 569, 571, 572, 574, 575, 576, 576, 577, 575, 573, 571, 569, 568, 566, 564, 562, 560, 559, 557, 555, 553, 554, 556, 558, 560, 561, 563, 565, 566, 568, 570, 572, 573, 575, 576, 577, 575, 573, 571, 569, 568, 566, 564, 562, 560, 558, 556, 554, 553, 551, 549, 550, 551, 553, 555, 557, 559, 561, 562, 564, 566, 568, 570, 571, 569, 567, 565, 563, 561, 559, 558, 556, 554, 552, 550, 548, 546, 544, 542, 541, 539, 537, 535, 533, 531, 529, 527, 526, 524, 522, 520, 518, 516, 514, 512, 511, 509, 501, 499, 497, 497, 498, 500, 500, 501, 502, 504, 503, 503, 502, 502, 501, 500, 499, 498, 497, 496, 496, 495, 494, 493, 492, 491, 491, 490, 489, 488, 487, 488, 487, 486, 485, 486, 484, 485, 487, 489, 490, 492, 493, 494, 496, 497, 499, 500, 501, 503, 504, 506, 507, 509, 510, 511, 513, 513, 514, 516, 518, 519, 521, 523, 524, 526, 528, 529, 531, 532, 534, 536, 537, 539, 541, 542, 544, 546, 547, 549, 550, 552, 554, 555, 557, 559, 560, 561, 563, 565, 567, 567, 569, 571, 572, 570, 568, 566, 564, 565, 567, 568, 566, 564, 565, 567, 568, 566, 564, 565, 567, 568, 566, 564, 564, 566, 568, 566, 564, 564, 566, 564, 564, 566, 564, 564, 566, 564, 564, 566, 564, 564, 562, 560, 558, 560, 558, 556, 554, 552, 550, 548, 546, 544, 542, 540, 538, 536, 534, 532, 530, 528, 526, 524, 522, 520, 518, 516, 517, 515, 513, 511, 512, 510, 508, 510, 508, 506, 504, 502, 500, 498, 496, 494, 492, 490, 488, 486, 484, 482, 480, 478, 476, 474, 472, 470, 468, 466, 464, 462, 460, 458, 456, 454, 452, 450, 448, 446, 444, 442, 440, 438, 436, 434, 432, 430, 428, 426, 424, 422, 420, 418, 416, 414, 412, 410, 408, 406, 404, 402, 400, 398, 399, 397, 395, 393, 391, 389, 387, 385, 367, 367, 328, 329, 330, 331, 333, 334, 336, 337, 339, 339, 342, 342, 344, 345, 346, 344, 343, 341, 339, 337, 335, 334, 332, 330, 328, 326, 325, 323, 321, 319, 317, 315, 314, 312, 310, 308, 306, 305, 288, 287, 285, 283, 281, 280, 278, 276, 274, 273, 273, 271, 270, 268, 266, 265, 265, 263, 264, 264, 263, 264, 262, 261, 260, 259, 258, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 270, 269, 268, 267, 265, 264, 263, 262, 261, 260, 258, 257, 256, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 268, 270, 271, 273, 274, 274, 272, 271, 269, 267, 266, 264, 262, 260, 259, 257, 255, 253, 252, 250, 251, 253, 255, 256, 258, 260, 261, 263, 264, 266, 268, 269, 271, 271, 270, 268, 266, 265, 263, 261, 259, 258, 256, 254, 252, 251, 249, 250, 249, 247, 245, 244, 242, 240, 241, 243, 244, 246, 248, 249, 251, 252, 254, 255, 257, 258, 260, 261, 259, 257, 256, 254, 252, 251, 249, 247, 246, 244, 242, 241, 239, 240, 242, 243, 245, 246, 248, 249, 251, 252, 254, 255, 257, 259, 259, 258, 256, 254, 253, 251, 250, 248, 246, 245, 243, 241, 240, 238, 239, 240, 242, 243, 245, 247, 248, 250, 251, 253, 254, 256, 257, 258, 260, 258, 256, 255, 253, 251, 249, 248, 246, 244, 242, 241, 239, 237, 236, 234, 232, 230, 229, 227, 225, 226, 228, 229, 231, 233, 234, 236, 237, 239, 241, 242, 244, 246, 247, 245, 243, 241, 240, 238, 236, 235, 233, 231, 229, 228, 226, 224, 225, 226, 228, 230, 231, 233, 235, 236, 238, 240, 241, 243, 244, 246, 244, 242, 240, 239, 237, 235, 234, 232, 230, 228, 227, 225, 225, 227, 229, 230, 232, 233, 235, 237, 238, 240, 242, 243, 245, 243, 241, 239, 238, 236, 234, 233, 231, 229, 227, 226, 224, 224, 226, 227, 229, 231, 232, 234, 236, 237, 239, 241, 242, 244, 242, 240, 238, 237, 235, 233, 232, 230, 228, 226, 225, 223, 223, 225, 226, 228, 230, 231, 233, 234, 236, 238, 239, 241, 243, 241, 239, 237, 236, 234, 232, 231, 229, 227, 225, 224, 222, 220, 222, 224, 224, 225, 224, 223, 223, 222, 221, 220, 218, 217, 216, 215, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 227, 226, 225, 224, 223, 221, 220, 219, 218, 217, 216, 215, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 227, 229, 230, 229, 229, 228, 226, 224, 223, 221, 220, 218, 216, 215, 213, 211, 210, 208, 209, 208, 206, 205, 206, 207, 209, 210, 212, 213, 214, 216, 217, 219, 220, 221, 223, 223, 225, 226, 224, 222, 221, 219, 217, 215, 214, 212, 210, 209, 207, 205, 203, 202, 200, 198, 196, 195, 193, 191, 189, 188, 186, 184, 183, 181, 179, 177, 176, 159, 157, 156, 154, 152, 151, 149, 147, 146, 147, 146, 144, 143, 141, 140, 141, 139, 138, 137, 135, 135, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 151, 149, 148, 147, 145, 144, 142, 141, 139, 138, 137, 135, 134, 134, 135, 134, 133, 132, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 143, 142, 141, 139, 138, 137, 136, 135, 134, 132, 131, 130, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 141, 140, 139, 138, 137, 135, 134, 133, 132, 131, 130, 129, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 141, 141, 142, 144, 145, 143, 141, 140, 138, 136, 135, 133, 131, 130, 128, 126, 125, 123, 124, 125, 127, 128, 130, 132, 133, 135, 136, 138, 139, 141, 142, 143, 142, 140, 138, 137, 135, 134, 132, 130, 129, 127, 125, 124, 122, 123, 121, 120, 118, 116, 115, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 127, 128, 130, 131, 132, 131, 129, 127, 126, 124, 123, 121, 120, 118, 117, 115, 114, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 127, 128, 130, 131, 129, 128, 126, 125, 123, 122, 120, 118, 117, 115, 114, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 127, 128, 129, 128, 126, 125, 123, 122, 120, 119, 117, 116, 114, 113, 111, 111, 110, 108, 107, 106, 104, 104, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 120, 121, 120, 118, 117, 115, 114, 113, 111, 110, 108, 107, 106, 104, 103, 103, 104, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 120, 118, 117, 115, 114, 113, 111, 110, 108, 107, 106, 104, 103, 101, 101, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 118, 119, 120, 118, 117, 115, 114, 112, 110, 109, 107, 105, 104, 102, 100, 99, 97, 96, 97, 98, 100, 101, 103, 104, 106, 107, 109, 111, 112, 114, 115, 116, 114, 112, 111, 109, 107, 106, 104, 103, 101, 99, 98, 96, 94, 95, 97, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 114, 115, 113, 111, 110, 108, 106, 105, 103, 101, 100, 98, 97, 95, 93, 94, 96, 97, 98, 97, 96, 95, 94, 92, 91, 90, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 102, 101, 100, 99, 98, 97, 95, 94, 93, 92, 91, 90, 89, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 101, 103, 104, 106, 104, 102, 101, 99, 97, 96, 94, 93, 91, 89, 88, 86, 77, 79, 80, 81, 84, 85, 87, 87, 90, 90, 93, 93, 95, 97, 99, 100, 99, 98, 97, 96, 95, 95, 94, 93, 92, 91, 90, 90, 89, 88, 87, 86, 85, 84, 84, 84, 86, 85, 84, 83, 85, 86, 87, 88, 90, 91, 93, 94, 96, 97, 98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 113, 114, 115, 117, 118, 120, 122, 123, 125, 126, 128, 130, 131, 133, 135, 136, 138, 140, 141, 143, 144, 146, 148, 149, 151, 153, 154, 156, 158, 159, 161, 163, 163, 164, 165, 167, 169, 167, 165, 163, 161, 159, 157, 155, 154, 152, 152, 150, 148, 146, 144, 142, 141, 139, 137, 135, 133, 131, 129, 127, 125, 123, 121, 119, 117, 115, 113, 111, 109, 107, 105, 103, 101, 99, 97, 95, 93, 91, 89, 87, 85, 83, 81, 79, 77, 75, 73, 71, 69, 67, 65, 63, 61, 59, 57, 55, 53, 51, 49, 47, 45, 43, 41, 36, 38, 40, 42, 44, 46, 48, 50, -2]
    ry=[25, 50, 50, 50, 50, 50, 48, 48, 48, 48, 47, 45, 45, 44, 44, 43, 42, 42, 41, 41, 40, 40, 39, 39, 38, 38, 37, 36, 33, 31, 31, 30, 30, 30, 30, 29, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 114, 115, 115, 115, 116, 116, 116, 189, 188, 187, 187, 186, 185, 184, 183, 182, 181, 179, 180, 179, 178, 180, 172, 170, 170, 168, 169, 167, 167, 166, 166, 165, 164, 163, 162, 136, 134, 135, 135, 134, 133, 133, 133, 132, 132, 132, 131, 131, 130, 130, 130, 129, 129, 129, 128, 128, 128, 127, 127, 127, 126, 126, 126, 125, 166, 166, 165, 165, 164, 164, 163, 163, 162, 162, 161, 161, 160, 160, 159, 158, 158, 157, 157, 156, 156, 155, 155, 154, 154, 153, 153, 152, 152, 151, 151, 150, 150, 149, 149, 148, 148, 147, 147, 146, 146, 145, 145, 144, 143, 267, 267, 266, 265, 265, 264, 263, 263, 262, 261, 261, 260, 259, 258, 258, 257, 256, 257, 257, 256, 256, 255, 254, 253, 252, 251, 249, 248, 247, 246, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 261, 260, 259, 258, 257, 256, 254, 253, 252, 251, 250, 249, 248, 246, 247, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 262, 263, 263, 263, 263, 262, 261, 260, 260, 259, 258, 257, 256, 255, 255, 254, 253, 252, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 265, 264, 263, 263, 262, 261, 261, 260, 259, 259, 258, 257, 257, 256, 255, 255, 255, 256, 257, 257, 258, 259, 260, 261, 262, 262, 263, 264, 265, 264, 263, 263, 262, 261, 261, 260, 259, 258, 258, 257, 256, 256, 255, 254, 254, 253, 252, 252, 251, 250, 250, 249, 248, 248, 247, 246, 245, 245, 244, 243, 243, 242, 265, 264, 263, 263, 262, 262, 262, 262, 262, 262, 260, 261, 260, 258, 256, 254, 252, 251, 249, 247, 246, 248, 250, 252, 254, 256, 257, 259, 261, 263, 265, 227, 226, 225, 227, 223, 224, 177, 174, 172, 171, 169, 168, 167, 165, 164, 162, 161, 160, 158, 157, 155, 154, 152, 151, 150, 151, 150, 149, 148, 147, 146, 145, 144, 142, 141, 140, 139, 138, 137, 136, 134, 133, 132, 131, 130, 129, 128, 126, 125, 124, 123, 122, 121, 120, 118, 78, 71, 35, 35, 34, 32, 33, 32, 32, 32, 32, 32, 32, 33, 34, 34, 34, 34, 35, 36, 36, 36, 36, 37, 38, 38, 38, 38, 39, 40, 40, 40, 40, 41, 42, 42, 43, 44, 44, 45, 46, 46, 47, 48, 48, 49, 49, 49, 49, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 47, 47, 46, 45, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 39, 38, 38, 38, 38, 38, 38, 37, 37, 37, 37, 37, 36, 36, 36, 36, 36, 36, 35, 35, 35, 35, 33, 33, 32, 32, 32, 31, 31, 31, 138, 140, 253, 251, 252, 251, 251, 250, 249, 249, 249, 249, 248, 248, 247, 247, 246, 245, 244, 244, 243, 242, 241, 240, 239, 239, 238, 237, 236, 235, 234, 233, 233, 232, 231, 230, 229, 228, 228, 227, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 256, 255, 254, 253, 252, 250, 250, 249, 250, 250, 248, 249, 247, 246, 244, 242, 241, 239, 240, 242, 244, 245, 247, 249, 251, 252, 254, 256, 258, 259, 261, 262, 260, 258, 257, 255, 253, 252, 250, 248, 247, 245, 244, 242, 240, 241, 243, 245, 246, 248, 250, 252, 253, 255, 257, 259, 260, 262, 263, 263, 262, 262, 262, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 250, 249, 248, 247, 246, 244, 243, 244, 245, 246, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 259, 257, 256, 255, 254, 253, 252, 251, 249, 248, 247, 246, 245, 245, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 260, 261, 261, 260, 259, 258, 257, 256, 255, 253, 252, 251, 250, 249, 248, 246, 247, 248, 249, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 262, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 252, 253, 252, 253, 252, 250, 250, 249, 247, 245, 244, 242, 241, 239, 239, 241, 243, 244, 246, 248, 250, 251, 253, 255, 257, 258, 260, 261, 260, 258, 256, 255, 253, 252, 250, 248, 247, 245, 243, 242, 240, 240, 242, 244, 245, 247, 249, 251, 252, 254, 256, 258, 259, 261, 263, 262, 262, 263, 262, 262, 261, 260, 259, 258, 257, 256, 254, 253, 252, 251, 250, 249, 247, 248, 247, 246, 244, 245, 247, 248, 250, 251, 252, 254, 255, 257, 258, 260, 261, 262, 263, 262, 261, 260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 262, 261, 260, 258, 257, 256, 255, 254, 253, 254, 252, 251, 250, 248, 247, 248, 247, 245, 244, 243, 243, 244, 246, 247, 249, 250, 252, 253, 255, 256, 258, 260, 261, 262, 261, 260, 258, 257, 255, 254, 253, 251, 250, 248, 247, 245, 244, 244, 244, 242, 240, 239, 239, 241, 242, 244, 246, 248, 249, 251, 253, 255, 256, 258, 259, 258, 256, 255, 253, 251, 250, 248, 246, 245, 243, 241, 240, 240, 242, 243, 245, 247, 249, 250, 252, 254, 256, 257, 259, 261, 259, 257, 256, 254, 252, 251, 249, 248, 246, 244, 243, 241, 239, 241, 243, 244, 246, 248, 250, 251, 253, 255, 257, 258, 260, 262, 262, 262, 261, 261, 262, 260, 259, 258, 257, 256, 255, 254, 252, 251, 250, 249, 248, 247, 247, 248, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 263, 263, 262, 261, 260, 259, 257, 256, 255, 254, 253, 252, 251, 249, 248, 249, 247, 246, 245, 243, 242, 241, 241, 243, 244, 245, 247, 248, 250, 251, 253, 254, 255, 257, 258, 259, 258, 257, 255, 254, 253, 251, 250, 249, 248, 246, 245, 244, 242, 243, 244, 245, 247, 248, 250, 251, 253, 254, 255, 257, 258, 260, 261, 259, 258, 257, 256, 254, 253, 252, 250, 249, 248, 247, 245, 245, 247, 248, 250, 251, 253, 254, 255, 257, 258, 260, 261, 262, 261, 260, 258, 257, 256, 255, 253, 252, 251, 249, 248, 247, 247, 245, 244, 243, 241, 240, 240, 242, 243, 245, 246, 248, 249, 251, 252, 254, 255, 257, 258, 260, 258, 257, 255, 254, 253, 251, 250, 248, 247, 245, 244, 243, 241, 241, 243, 244, 246, 247, 249, 250, 252, 254, 255, 257, 258, 260, 261, 260, 258, 257, 255, 254, 253, 251, 250, 248, 247, 245, 244, 243, 243, 244, 246, 247, 249, 250, 252, 253, 255, 256, 258, 259, 261, 262, 262, 262, 262, 260, 259, 258, 257, 256, 255, 254, 252, 251, 250, 249, 248, 247, 246, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 261, 261, 260, 259, 257, 256, 255, 254, 253, 252, 251, 249, 248, 247, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 263, 261, 260, 259, 258, 257, 256, 255, 253, 252, 251, 250, 249, 248, 248, 248, 249, 250, 248, 247, 245, 243, 242, 240, 239, 237, 238, 240, 241, 243, 245, 247, 248, 250, 252, 253, 255, 257, 259, 259, 258, 256, 254, 253, 251, 250, 248, 246, 245, 243, 241, 240, 238, 239, 241, 242, 244, 246, 248, 249, 251, 253, 254, 256, 258, 260, 260, 261, 261, 262, 261, 260, 259, 258, 257, 256, 254, 253, 252, 251, 250, 249, 247, 263, 262, 263, 262, 262, 262, 263, 262, 263, 263, 263, 263, 263, 263, 262, 262, 260, 259, 257, 255, 253, 251, 250, 248, 246, 247, 249, 251, 253, 255, 256, 258, 260, 262, 264, 228, 221, 223, 224, 226, 176, 176, 175, 174, 172, 171, 169, 168, 166, 165, 164, 162, 161, 159, 158, 157, 155, 154, 152, 151, 149, 150, 151, 149, 148, 147, 146, 145, 144, 143, 141, 140, 139, 138, 137, 136, 135, 133, 132, 131, 130, 129, 128, 127, 125, 124, 123, 122, 121, 120, 118, 117, 78, 71, 35, 33, 33, 33, 33, 32, 32, 32, 31, 31, 31, 30, 28, 28, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 38, 38, 38, 38, 50, 50, 50, 50, 50, 50, 50, 50, 0]
    rz=[0, 0, 0, 0, 1, 2, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 2, 2, 1, 2, 2, 2, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 9, 9, 10, 10, 9, 9, 8, 8, 9, 9, 8, 8, 9, 9, 8, 8, 9, 8, 8, 7, 6, 5, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 11, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 4, 4, 3, 2, 2, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 5, 6, 5, 6, 7, 6, 7, 6, 7, 6, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 9, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 10, 9, 8, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9, 10, 9, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 11, 11, 11, 11, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

    for i in range(len(rx) - 1):
        dx = 25 * math.cos(rz[i])
        dy = 25 * math.sin(rz[i])
        plt.plot([rx[i], rx[i] + dx], [ry[i], ry[i] + dy], 'b-')

    tmp = 0
    for i in range(len(rx) - 1):
        dx = rx[i] - rx[i + 1]
        dy = ry[i] - ry[i + 1]
        tmp = tmp + math.hypot(dx, dy)
    print('the total length is :', tmp)
    for i in range (len(rx)-1):
        plt.plot([rx[i],rx[i+1]],[ry[i],ry[i+1]])
    plt.plot(rx,ry,'r*')


    plt.show()



if __name__ == "__main__":
    main()
